#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser


__version__ = (2015, 2, 2, 20, 33, 56, 0)

__all__ = [
    'ProtogenParser',
    'ProtogenSemantics',
    'main'
]


class ProtogenParser(Parser):
    def __init__(self, whitespace=None, nameguard=True, **kwargs):
        super(ProtogenParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            **kwargs
        )

    @graken()
    def _string_(self):
        self._pattern(r'@?"[^"]+"')

    @graken()
    def _ident_(self):
        self._pattern(r'[a-zA-Z_][a-zA-Z_0-9]*')

    @graken()
    def _number_(self):
        self._pattern(r'\d+')

    @graken()
    def _doccomment_(self):
        self._token("'")
        self._pattern(r'.*')
        self.ast['@'] = self.last_node

    @graken()
    def _lit_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._number_()
                    self.ast['@'] = self.last_node
                with self._option():
                    self._string_()
                    self.ast['@'] = self.last_node
                self._error('no available options')

    @graken()
    def _server_(self):
        self._token('server')
        self._ident_()
        self.ast['name'] = self.last_node
        self._token(';')

        self.ast._define(
            ['name'],
            []
        )

    @graken()
    def _notif_(self):
        self._token('notification')
        self._ident_()
        self.ast['name'] = self.last_node
        self._token(';')

        self.ast._define(
            ['name'],
            []
        )

    @graken()
    def _resp_(self):
        self._token('response')
        self._ident_()
        self.ast['name'] = self.last_node
        self._token(';')

        self.ast._define(
            ['name'],
            []
        )

    @graken()
    def _config_(self):
        self._token('config')
        self._token('{')

        def block0():
            self._valfield_()
            self.ast.setlist('@', self.last_node)
            self._token(',')
        self._closure(block0)
        with self._optional():
            self._valfield_()
            self.ast.setlist('@', self.last_node)
            with self._optional():
                self._token(',')
        self._token('}')

    @graken()
    def _valfield_(self):
        self._ident_()
        self.ast['name'] = self.last_node
        self._token(':')
        self._lit_()
        self.ast['value'] = self.last_node

        self.ast._define(
            ['name', 'value'],
            []
        )

    @graken()
    def _attr_inner_(self):
        with self._choice():
            with self._option():
                self._ident_()
                self.ast['name'] = self.last_node
                self._token('=')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._lit_()
                        with self._option():
                            self._ident_()
                        self._error('no available options')
                self.ast['val'] = self.last_node
            with self._option():
                self._ident_()
                self.ast['name'] = self.last_node
                self._token('(')

                def block5():
                    self._attr_inner_()
                    self._token(',')
                self._closure(block5)
                self.ast.setlist('args', self.last_node)
                with self._optional():
                    self._attr_inner_()
                    with self._optional():
                        self._token(',')
                self.ast.setlist('args', self.last_node)
                self._token(')')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._lit_()
                        with self._option():
                            self._ident_()
                        self._error('no available options')
                self.ast['plain'] = self.last_node
            self._error('no available options')

        self.ast._define(
            ['name', 'val', 'plain'],
            ['args']
        )

    @graken()
    def _attrs_(self):

        def block0():
            self._token('[')
            self._attr_inner_()
            self.ast.setlist('@', self.last_node)
            self._token(']')
        self._closure(block0)

    @graken()
    def _type_(self):
        with self._choice():
            with self._option():
                self._primitive_()
                self.ast['@'] = self.last_node
            with self._option():
                self._object_()
                self.ast['obj'] = self.last_node
            with self._option():
                with self._group():
                    self._token('array')
                    self._token('<')
                    self._type_()
                    self.ast['array'] = self.last_node
                    self._token('>')
                self.ast['@'] = self.last_node
            with self._option():
                with self._group():
                    self._token('map')
                    self._token('<')
                    self._type_()
                    self.ast['key'] = self.last_node
                    self._token(',')
                    self._type_()
                    self.ast['val'] = self.last_node
                    self._token('>')
                self.ast['@'] = self.last_node
            with self._option():
                self._token('string')
                self.ast['@'] = self.last_node
            with self._option():
                self._ident_()
                self.ast['@'] = self.last_node
            self._error('expecting one of: string')

        self.ast._define(
            ['obj'],
            []
        )

    @graken()
    def _primitive_(self):
        with self._choice():
            with self._option():
                self._token('i8')
            with self._option():
                self._token('u8')
            with self._option():
                self._token('i16')
            with self._option():
                self._token('u16')
            with self._option():
                self._token('i32')
            with self._option():
                self._token('u32')
            with self._option():
                self._token('f32')
            with self._option():
                self._token('i64')
            with self._option():
                self._token('u64')
            with self._option():
                self._token('f64')
            self._error('expecting one of: f32 f64 i16 i32 i64 i8 u16 u32 u64 u8')

    @graken()
    def _field_(self):
        with self._optional():
            self._attrs_()
            self.ast['attributes'] = self.last_node
        self._ident_()
        self.ast['name'] = self.last_node
        self._token(':')
        self._type_()
        self.ast['type'] = self.last_node

        self.ast._define(
            ['attributes', 'name', 'type'],
            []
        )

    @graken()
    def _object_(self):
        self._token('{')

        def block0():
            self._field_()
            self.ast.setlist('@', self.last_node)
            self._token(',')
        self._closure(block0)
        with self._optional():
            self._field_()
            self.ast.setlist('@', self.last_node)
            with self._optional():
                self._token(',')
        self._token('}')

    @graken()
    def _newtype_(self):
        self._token('type')
        self._ident_()
        self.ast['name'] = self.last_node
        self._token('=')
        self._type_()
        self.ast['type'] = self.last_node
        self._token(';')

        self.ast._define(
            ['name', 'type'],
            []
        )

    @graken()
    def _include_(self):
        self._token('include')
        self._string_()
        self.ast['@'] = self.last_node
        self._token(';')

    @graken()
    def _property_(self):
        with self._optional():
            self._attrs_()
            self.ast['attributes'] = self.last_node
        self._ident_()
        self.ast['name'] = self.last_node
        self._token('=')
        self._type_()
        self.ast['type'] = self.last_node
        self._token(';')

        self.ast._define(
            ['attributes', 'name', 'type'],
            []
        )

    @graken()
    def _catprop_(self):
        self._ident_()
        self.ast['name'] = self.last_node
        self._token('=')
        self._ident_()
        self.ast['val'] = self.last_node
        self._token(';')

        self.ast._define(
            ['name', 'val'],
            []
        )

    @graken()
    def _method_(self):
        with self._optional():
            self._attrs_()
            self.ast['attributes'] = self.last_node
        self._token('method')
        self._ident_()
        self.ast['name'] = self.last_node
        with self._optional():
            self._token('{')

            def block3():
                self._ident_()
            self._closure(block3)
            self.ast['attrs'] = self.last_node
            self._token('}')
        self._token('{')

        def block5():
            self._doccomment_()
        self._closure(block5)
        self.ast['doccomments'] = self.last_node

        def block7():
            self._property_()
        self._closure(block7)
        self.ast['properties'] = self.last_node
        self._token('}')

        self.ast._define(
            ['attributes', 'name', 'attrs', 'doccomments', 'properties'],
            []
        )

    @graken()
    def _category_(self):
        self._token('category')
        self._ident_()
        self.ast['name'] = self.last_node
        self._token('{')

        def block1():
            with self._choice():
                with self._option():
                    self._catprop_()
                    self.ast.setlist('properties', self.last_node)
                with self._option():
                    self._include_()
                    self.ast.setlist('includes', self.last_node)
                with self._option():
                    self._method_()
                    self.ast.setlist('methods', self.last_node)
                self._error('no available options')
        self._closure(block1)
        self._token('}')

        self.ast._define(
            ['name'],
            ['properties', 'includes', 'methods']
        )

    @graken()
    def _protocol_(self):
        with self._optional():
            self._config_()
        self.ast['config'] = self.last_node

        def block1():
            with self._choice():
                with self._option():
                    self._resp_()
                    self.ast.setlist('response_codes', self.last_node)
                with self._option():
                    self._notif_()
                    self.ast.setlist('notifications', self.last_node)
                with self._option():
                    self._server_()
                    self.ast.setlist('servers', self.last_node)
                with self._option():
                    self._newtype_()
                    self.ast.setlist('types', self.last_node)
                with self._option():
                    self._category_()
                    self.ast.setlist('categories', self.last_node)
                with self._option():
                    self._include_()
                    self.ast.setlist('includes', self.last_node)
                self._error('no available options')
        self._closure(block1)
        self._check_eof()

        self.ast._define(
            ['config'],
            ['response_codes', 'notifications', 'servers', 'types', 'categories', 'includes']
        )


class ProtogenSemantics(object):
    def string(self, ast):
        return ast

    def ident(self, ast):
        return ast

    def number(self, ast):
        return ast

    def doccomment(self, ast):
        return ast

    def lit(self, ast):
        return ast

    def server(self, ast):
        return ast

    def notif(self, ast):
        return ast

    def resp(self, ast):
        return ast

    def config(self, ast):
        return ast

    def valfield(self, ast):
        return ast

    def attr_inner(self, ast):
        return ast

    def attrs(self, ast):
        return ast

    def type(self, ast):
        return ast

    def primitive(self, ast):
        return ast

    def field(self, ast):
        return ast

    def object(self, ast):
        return ast

    def newtype(self, ast):
        return ast

    def include(self, ast):
        return ast

    def property(self, ast):
        return ast

    def catprop(self, ast):
        return ast

    def method(self, ast):
        return ast

    def category(self, ast):
        return ast

    def protocol(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None, nameguard=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = ProtogenParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in ProtogenParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for Protogen.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-n', '--no-nameguard', action='store_true',
                        dest='no_nameguard',
                        help="disable the 'nameguard' feature")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace,
        nameguard=not args.no_nameguard
    )
